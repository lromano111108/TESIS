@model List<RubricaWeb.ViewModels.VM_LibretaNotasMateria>

@{
    Layout = "~/Views/Shared/_Layout_Docente.cshtml";
    RubricaWeb.ViewModels.VM_Materia materia = (RubricaWeb.ViewModels.VM_Materia)ViewBag.Materia;

    //List<RubricaWeb.ViewModels.VM_Estudiante> itemsCurso = (List<RubricaWeb.ViewModels.VM_Estudiante>)ViewBag.listaEstudiantes;
    //string nombreMateria = ViewBag.NombreMateria;
    //string nombreCurso = ViewBag.NombreCurso;

    //List<SelectListItem> combo = (List<SelectListItem>)ViewBag.comboCriterios;

    //RubricaWeb.ViewModels.VM_Tema tema = ViewBag.datosTema;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>rubrica</title>
    @*<link href="~/Content/rubrica.css" rel="stylesheet" id="bootstrap-css">*@
    <link href="~/Content/libreta-listado-rubrica.css" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.1/css/all.css" integrity="sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp" crossorigin="anonymous">
</head>
<body class="container-fluid">


    <h1 class="text-center text-light fw-bolder">@materia.materia</h1>
    <h3 class="text-center text-light fw-bolder">de @materia.curso</h3>



    @using (Html.BeginForm())
    {
        @*@Html.HiddenFor(Model => Model.IdDocente)idNroTema*@


        @*<div class="col-1 p-0 border">
                @Html.DropDownListFor(model => model[1].Numerotema, new SelectList(combo, "Value", "Text"), "Valor", htmlAttributes: new { @class = "form-control dropdown text-center", @Name = "valorCriterio" })


                @Html.DropDownList("idCombo", combo, "combo", htmlAttributes: new { @class = "form-control", @onchange= "Refresh()" })


            </div>*@

        <div class="container-fluid ex1">

            <div class="row  text-center table-striped bg-info small pt-2 pb-2 border border-left border-right">
                <div class="col-1  border-right font-weight-bold bg-info " style="width:30px">N°</div>
                <div class="col-3  border-left border-right font-weight-bold " style="width:90px">Nombre y Apellido</div>
                <div class="col-1  border-left border-right font-weight-bold " style="width:30px">TEMA 7:</div>
                <div class="col-1  border-left border-right font-weight-bold " style="width:30px">TEMA 8:</div>
                <div class="col-1  border-left border-right font-weight-bold " style="width:30px">TEMA 9:</div>
                <div class="col-1  border-left border-right font-weight-bold " style="width:30px">TEMA 10:</div>
                <div class="col-1  border-left border-right font-weight-bold " style="width:30px">TEMA 11:</div>
                <div class="col-1  border-left border-right font-weight-bold " style="width:30px">TEMA 12:</div>
                <div class="col-1  border-left border-right font-weight-bold  text-center p-0">CONDICION</div>
                <div class="col-1  border-left  font-weight-bold ">PROMEDIO</div>


            </div>



            @{ int nro = 1;
                for (int i = 0; i < Model.Count; i++)

                {



                    <div class="row  text-center p-0 bg-light ">

                        @*@Html.HiddenFor(Model => Model[i].IdEstudiante, new { })*@
                        @Html.HiddenFor(Model => Model[i].IdTema, new { })
                        @Html.HiddenFor(Model => Model[i].IdMateria, new { })
                        @*@Html.HiddenFor(Model => Model[1].IdNroTema, new { })*@

                        <div class="col-1  p-0  border ">@(nro ++)</div>

                        <div class="col-3 p-0  border   ">@Html.Label(Model[i].NombreEstudiante)</div>

                        @if (Model[i].Nota7 < 7)
                        {
                            if (Model[i].Nota7 > 0)
                            {
                                <div class="col-1  p-0 border text-danger"> @Html.Label(Model[i].Nota7.ToString())</div>
                            }
                            else
                            {
                                <div class="col-1  p-0 border "></div>
                            }
                        }
                        else
                        {
                            <div class="col-1   p-0 border "> @Html.Label(Model[i].Nota7.ToString())</div>
                        }
                        @if (Model[i].Nota8 < 7)
                        {
                            if (Model[i].Nota8 > 0)
                            {
                                <div class="col-1   p-0 border text-danger"> @Html.Label(Model[i].Nota8.ToString())</div>
                            }
                            else
                            {
                                <div class="col-1   p-0 border "></div>
                            }
                        }
                        else
                        {
                            <div class="col-1   p-0 border "> @Html.Label(Model[i].Nota8.ToString())</div>
                        }

                        @if (Model[i].Nota9 < 7)
                        {
                            if (Model[i].Nota9 > 0)
                            {
                                <div class="col-1   p-0 border text-danger"> @Html.Label(Model[i].Nota9.ToString())</div>
                            }
                            else
                            {
                                <div class="col-1   p-0 border "></div>
                            }
                        }
                        else
                        {
                            <div class="col-1   p-0 border "> @Html.Label(Model[i].Nota9.ToString())</div>
                        }


                        @if (Model[i].Nota10 < 7)
                        {
                            if (Model[i].Nota10 > 0)
                            {
                                <div class="col-1   p-0 border text-danger"> @Html.Label(Model[i].Nota10.ToString())</div>
                            }
                            else
                            {
                                <div class="col-1    p-0 border "></div>
                            }
                        }
                        else
                        {
                            <div class="col-1   p-0 border "> @Html.Label(Model[i].Nota10.ToString())</div>
                        }

                        @if (Model[i].Nota11 < 7)
                        {
                            if (Model[i].Nota11 > 0)
                            {
                                <div class="col-1    p-0 border text-danger"> @Html.Label(Model[i].Nota11.ToString())</div>
                            }
                            else
                            {
                                <div class="col-1   p-0 border "></div>
                            }
                        }
                        else
                        {
                            <div class="col-1   p-0 border "> @Html.Label(Model[i].Nota11.ToString())</div>
                        }

                        @if (Model[i].Nota12 < 7)
                        {
                            if (Model[i].Nota12 > 0)
                            {
                                <div class="col-1   p-0 border text-danger"> @Html.Label(Model[i].Nota12.ToString())</div>
                            }
                            else
                            {
                                <div class="col-1   p-0 border "></div>
                            }
                        }
                        else
                        {
                            <div class="col-1   p-0 border"> @Html.Label(Model[i].Nota12.ToString())</div>
                        }



                        @if (Model[i].Condicion)
                        {
                            <div class="col-1   p-0 border font-weight-bold text-success bg-light"> REGULAR  </div>
                        }
                        else
                        {
                            <div class="col-1   p-0 border text-danger font-weight-bold bg-light"> COLOQUIO</div>
                        }

                        @if (Model[i].Condicion)
                        {
                            <div class="col-1   bg-light p-0 font-weight-bold border"> @Html.Label(Model[i].Promedio.ToString())  </div>
                        }
                        else
                        {
                            <div class="col-1  bg-light font-weight-bold  p-0  border"> </div>
                        }






                    </div>

                }
            }



        </div>
        <div class="row  pr-3 h4">
            <div class="col-12 d-flex m-2">

                <div class="col-12 d-flex justify-content-end">
                    <a class="alert-link text-light font-weight-bolder  pr-2 float-lg-right" href="@Url.Action("LibretaMateria", "Rubrica", new {  @idMateria = Model[0].IdMateria, @pagina=1})">1</a>
                    <a class="alert-link text-light" href="#">-</a>
                    <a class="alert-link text-light font-weight-bolder  pl-2 float-lg-right" href="@Url.Action("LibretaMateria", "Rubrica", new {  @idMateria = Model[0].IdMateria, @pagina=2})">2</a>
                </div>
            </div>

        </div>
        <div class="row mt-5 mb-5 pb-5">
            <div class="col-12 d-flex text-center">

                <div class="col-4 text-center">
                    <a class="btn mt-2 text-light font-weight-bolder text-uppercase" href="@Url.Action("PanelDocente", "Docente", new { materia.idDocente})"><i class="text-primary fas fa-angle-double-left fa-3x align-items-center mb-2 "></i> <br /> Listado Materias</a>

                </div>
                <div class="col-4">
                    <a class="btn mt-2 text-light font-weight-bolder text-uppercase" href="@Url.Action("Print", "Rubrica", new {  @idMateria = Model[0].IdMateria, @pagina=1})"><i class="text-primary fas fa-print fa-3x align-items-center mb-2"></i><br /> IMPRIMIR</a>

                    @*<a class="btn mt-2  text-light font-weight-bolder text-uppercase" href="@Url.Action("CargaTemas", "Rubrica", new {  @idDocente = datos.idDocente,@idMateria = datos.idMateria, @idCurso = idcurso})"><i class="text-primary fas fa-plus-circle fa-3x align-items-center mb-2"></i> <br />TEMA NUEVO</a>*@

                </div>
                <div class="col-4">
                    <a class="btn mt-2  text-light font-weight-bolder text-uppercase" href="@Url.Action("ListadoTemasCargados", "Rubrica", new {  @idMateria = materia.idMateria, @idCurso = materia.idCurso})"><i class="text-primary fas fa-clipboard-list fa-lg fa-3x align-items-center mb-2"></i>  <br />Temas Cargados</a>
                </div>
            </div>
        </div>


    }
    <div class="container-xl bg-white">
        <div class="row text-center m-4">


            <div class="col-12 col-lg-12">
                <div id="piechart_3d" style="width: 100%; height: 500px;"></div>

            </div>
            @*<div class="col-4 col-lg-4">

                    <div id="columnchart_values" style="width: 900px; height: 300px;"></div>

                </div>*@


        </div>
        <div class="row text-center m-4">

            <div class="col-12 col-lg-12">
                <div id="top_x_div" style="width: 100%; height: 500px;"></div>

            </div>


        </div>

    </div>




    }


    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        @***********************@
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawChart2);

        function drawChart2() {



            var data = google.visualization.arrayToDataTable(@Html.Raw(ViewBag.Grafico));

                //([
                //['Desaprobados', 'Aprobados'],
                //['Desaprobados', 6],
                //['Aprobados', 1]
                //]);

            //[['Desaprobados', 'Aprobados'], ['    ,][['Desaprobados', 'Aprobados'], ['5', 2],]

            @*"[['Desaprobados', 'Aprobados'],['Des',6],],['Apro',1],] (@Html.Raw(ViewBag.Grafico));"*@

            var options = {
                title: 'Porcentajes de Aprobacion',
                is3D: true,
            };

            var chart = new google.visualization.PieChart(document.getElementById('piechart_3d'));
            chart.draw(data, options);
        }
                google.charts.load('current', { 'packages': ['bar'] });
        google.charts.setOnLoadCallback(drawStuff);

    </script>

    <script type="text/javascript">
        google.charts.load("current", { packages: ['corechart'] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = google.visualization.arrayToDataTable(@Html.Raw(ViewBag.GraficoBarra));



            //    ([
            //    ["Element", "Density", { role: "style" }],
            //    ["Copper", 8.94, "#b87333"],
            //    ["Silver", 10.49, "silver"],
            //    ["Gold", 19.30, "gold"],
            //    ["Platinum", 21.45, "color: #e5e4e2"]
            //]);

            var view = new google.visualization.DataView(data);
            view.setColumns([0, 1,
                {
                    calc: "stringify",
                    sourceColumn: 1,
                    type: "string",
                    role: "annotation"
                },
                2]);

            var options = {
                title: "NOTAS",
                width: 900,
                height: 500,
                bar: { groupWidth: "70%" },
                legend: { position: "none" },
                //backgroundColor: {fill: 'transparent'},
            };
            var chart = new google.visualization.ColumnChart(document.getElementById("columnchart_values"));
            chart.draw(view, options);
        }
    </script>


    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['bar'] });
        google.charts.setOnLoadCallback(drawStuff);

        function drawStuff() {
            var data1 = new google.visualization.arrayToDataTable(@Html.Raw(ViewBag.GraficoPromedio))
            //    ([
            //    ['Opening Move', 'Percentage'],
            //    ["King's pawn (e4)", 44],
            //    ["Queen's pawn (d4)", 31],
            //    ["Knight to King 3 (Nf3)", 12],
            //    ["Queen's bishop pawn (c4)", 10],
            //    ['Other', 3]
            //]);

            var options1 = {
                title: 'CANTIDAD DE TEMAS ADEUDADOS',
                width: 900,
                legend: { position: 'none' },
                //format:'#,##',
                //chart: {
                //    title: 'Chess opening moves',
                //    subtitle: 'popularity by percentage'
                //},
                bars: 'Vertical', // Required for Material Bar Charts.
                axes: {
                    x: {
                        0: { side: 'top', label: 'ESTUDIANTE' } // Top x-axis.
                    }
                },
                bar: { groupWidth: "90%" }
            };

            var chart = new google.charts.Bar(document.getElementById('top_x_div'));
            chart.draw(data1, options1);
        };
    </script>





</body>
</html>
